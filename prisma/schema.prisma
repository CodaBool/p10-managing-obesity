generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Weight {
  id         String     @id @default(cuid())
  userId     String
  createdAt  DateTime   @default(now())
  measuredAt DateTime   @default(now())
  weight     Int        
  unit       String     @default("lb")
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id          String     @id @default(cuid())
  userId      String
  createdAt   DateTime   @default(now())
  measuredAt  DateTime   @default(now())
  length      Int
  calories    Int?
  intensity   String     @default("medium")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Diet {
  id           String     @id @default(cuid())
  userId       String
  createdAt    DateTime   @default(now())
  measuredAt   DateTime   @default(now())
  calories     Int
  onWorkoutDay Boolean    @default(false)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Appointment {
  id            String     @id @default(cuid())
  userId        String
  createdAt     DateTime   @default(now())
  eventDate     DateTime   @default(now())
  reminderTime  String     @default("1 day")
  useEmail      Boolean    @default(true)
  usePhone      Boolean    @default(false)
  suppress      Boolean    @default(false)
  cancelled     Boolean    @default(false)
  reminderEmail String?   
  reminderPhone String?    
  notes         String?
  title         String?
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  password        String?
  passwordless    Boolean   @default(true)
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  weights         Weight[]
  exercises       Exercise[]
  diets           Diet[]
  appointments    Appointment[]
  height          Int?
  goalWeight      Int?
  goalExercise    Int?
  goalCalories    Int?
  age             Int?
  caloricMaintain Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}